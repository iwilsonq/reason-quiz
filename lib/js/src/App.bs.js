// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Form$ReactHooksTemplate = require("./Form.bs.js");
var Text$ReactHooksTemplate = require("./Text.bs.js");
var Types$ReactHooksTemplate = require("./Types.bs.js");
var Button$ReactHooksTemplate = require("./Button.bs.js");
var QuestionComposer$ReactHooksTemplate = require("./QuestionComposer.bs.js");

function str(prim) {
  return prim;
}

var mockQuestions = /* :: */[
  /* record */[
    /* id */"1",
    /* title */"What is your favorite color?",
    /* options : :: */[
      /* record */[
        /* id */"1",
        /* title */"Blue",
        /* isCorrect */false
      ],
      /* :: */[
        /* record */[
          /* id */"2",
          /* title */"Red",
          /* isCorrect */true
        ],
        /* :: */[
          /* record */[
            /* id */"3",
            /* title */"Green",
            /* isCorrect */false
          ],
          /* :: */[
            /* record */[
              /* id */"4",
              /* title */"Yellow",
              /* isCorrect */false
            ],
            /* [] */0
          ]
        ]
      ]
    ]
  ],
  /* [] */0
];

function quizReducer(state, action) {
  if (typeof action === "number") {
    if (action === 0) {
      return /* record */[/* questions */Types$ReactHooksTemplate.Question[/* appendEmpty */1](state[/* questions */0])];
    } else {
      console.log("SaveQuiz");
      return state;
    }
  } else {
    switch (action.tag | 0) {
      case 0 : 
          var questionID = action[0];
          return /* record */[/* questions */List.map((function (question) {
                          if (questionID === question[/* title */1]) {
                            return /* record */[
                                    /* id */question[/* id */0],
                                    /* title */question[/* title */1],
                                    /* options */Types$ReactHooksTemplate.QuestionOption[/* appendEmpty */1](question[/* options */2])
                                  ];
                          } else {
                            return question;
                          }
                        }), state[/* questions */0])];
      case 1 : 
          var title = action[1];
          var questionID$1 = action[0];
          return /* record */[/* questions */List.map((function (question) {
                          var match = questionID$1 === question[/* id */0];
                          if (match) {
                            return /* record */[
                                    /* id */question[/* id */0],
                                    /* title */title,
                                    /* options */question[/* options */2]
                                  ];
                          } else {
                            return question;
                          }
                        }), state[/* questions */0])];
      case 2 : 
          var title$1 = action[2];
          var optionID = action[1];
          var questionID$2 = action[0];
          return /* record */[/* questions */List.map((function (question) {
                          if (questionID$2 === question[/* id */0]) {
                            return /* record */[
                                    /* id */question[/* id */0],
                                    /* title */question[/* title */1],
                                    /* options */List.map((function (option) {
                                            var match = optionID === option[/* id */0];
                                            if (match) {
                                              return /* record */[
                                                      /* id */option[/* id */0],
                                                      /* title */title$1,
                                                      /* isCorrect */false
                                                    ];
                                            } else {
                                              return option;
                                            }
                                          }), question[/* options */2])
                                  ];
                          } else {
                            return question;
                          }
                        }), state[/* questions */0])];
      
    }
  }
}

function App(Props) {
  var match = React.useReducer(quizReducer, /* record */[/* questions */mockQuestions]);
  var dispatch = match[1];
  var onAddOption = function (id) {
    return Curry._1(dispatch, /* AddOption */Block.__(0, [id]));
  };
  var onChangeQuestionTitle = function (id, title) {
    return Curry._1(dispatch, /* ChangeQuestionTitle */Block.__(1, [
                  id,
                  title
                ]));
  };
  var onChangeQuestionOption = function (questionID, optionID, title) {
    return Curry._1(dispatch, /* ChangeQuestionOption */Block.__(2, [
                  questionID,
                  optionID,
                  title
                ]));
  };
  var renderQuestions = $$Array.of_list(List.map((function (question) {
              return React.createElement(QuestionComposer$ReactHooksTemplate.make, {
                          question: question,
                          onAddOption: onAddOption,
                          onChangeQuestionTitle: onChangeQuestionTitle,
                          onChangeQuestionOption: onChangeQuestionOption,
                          key: question[/* id */0]
                        });
            }), match[0][/* questions */0]));
  return React.createElement("main", {
              className: "mt-8 container mx-auto"
            }, React.createElement("header", {
                  className: "text-center"
                }, React.createElement(Text$ReactHooksTemplate.Heading[/* make */0], {
                      children: "A Reasonable Quiz"
                    }), React.createElement(Text$ReactHooksTemplate.make, {
                      children: "Create a quiz built of radio questions"
                    })), React.createElement(Form$ReactHooksTemplate.make, {
                  children: null,
                  onSubmit: (function (e) {
                      e.preventDefault();
                      return Curry._1(dispatch, /* SaveQuiz */1);
                    })
                }, React.createElement("div", {
                      className: "mb-8"
                    }, renderQuestions), React.createElement("footer", {
                      className: "flex items-center justify-between"
                    }, React.createElement(Button$ReactHooksTemplate.make, {
                          title: "Add Question",
                          onClick: (function (_e) {
                              return Curry._1(dispatch, /* AddQuestion */0);
                            }),
                          intent: /* Secondary */1
                        }), React.createElement(Button$ReactHooksTemplate.make, {
                          title: "Save",
                          intent: /* Primary */0,
                          type_: "submit"
                        }))));
}

var make = App;

exports.str = str;
exports.mockQuestions = mockQuestions;
exports.quizReducer = quizReducer;
exports.make = make;
/* react Not a pure module */
