// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var QuestionComposer$ReactHooksTemplate = require("./QuestionComposer.bs.js");

function str(prim) {
  return prim;
}

function App(Props) {
  var match = React.useReducer((function (state, action) {
          if (typeof action === "number") {
            return /* record */[/* questions */Pervasives.$at(state[/* questions */0], /* :: */[
                          /* record */[
                            /* title */"",
                            /* options : [] */0
                          ],
                          /* [] */0
                        ])];
          } else if (action.tag) {
            var title = action[1];
            var id = action[0];
            return /* record */[/* questions */List.map((function (question) {
                            if (id === question[/* title */0]) {
                              return /* record */[
                                      /* title */title,
                                      /* options */question[/* options */1]
                                    ];
                            } else {
                              return question;
                            }
                          }), state[/* questions */0])];
          } else {
            var id$1 = action[0];
            return /* record */[/* questions */List.map((function (question) {
                            if (id$1 === question[/* title */0]) {
                              return /* record */[
                                      /* title */question[/* title */0],
                                      /* options */Pervasives.$at(question[/* options */1], /* :: */[
                                            /* record */[
                                              /* title */"",
                                              /* isCorrect */false
                                            ],
                                            /* [] */0
                                          ])
                                    ];
                            } else {
                              return question;
                            }
                          }), state[/* questions */0])];
          }
        }), /* record */[/* questions : :: */[
          /* record */[
            /* title */"What is your favorite color?",
            /* options : :: */[
              /* record */[
                /* title */"Blue",
                /* isCorrect */false
              ],
              /* :: */[
                /* record */[
                  /* title */"Red",
                  /* isCorrect */true
                ],
                /* :: */[
                  /* record */[
                    /* title */"Green",
                    /* isCorrect */false
                  ],
                  /* :: */[
                    /* record */[
                      /* title */"Yellow",
                      /* isCorrect */false
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]
          ],
          /* [] */0
        ]]);
  var dispatch = match[1];
  var onAddOption = function (id) {
    return Curry._1(dispatch, /* AddOption */Block.__(0, [id]));
  };
  var onChangeQuestionTitle = function (id, title) {
    return Curry._1(dispatch, /* ChangeQuestionTitle */Block.__(1, [
                  id,
                  title
                ]));
  };
  var renderQuestions = $$Array.of_list(List.map((function (question) {
              return React.createElement(QuestionComposer$ReactHooksTemplate.make, {
                          question: question,
                          onAddOption: onAddOption,
                          onChangeQuestionTitle: onChangeQuestionTitle
                        });
            }), match[0][/* questions */0]));
  return React.createElement("main", undefined, React.createElement("h1", undefined, "A Simple Quiz"), React.createElement("p", undefined, "Create a quiz built of radio questions"), renderQuestions, React.createElement("button", {
                  onClick: (function (_e) {
                      return Curry._1(dispatch, /* AddQuestion */0);
                    })
                }, "Add Question"));
}

var make = App;

exports.str = str;
exports.make = make;
/* react Not a pure module */
