// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Form$ReactHooksTemplate = require("./Form.bs.js");
var Text$ReactHooksTemplate = require("./Text.bs.js");
var Button$ReactHooksTemplate = require("./Button.bs.js");

function valueFromEvent(evt) {
  return evt.target.value;
}

function QuestionComposer(Props) {
  var question = Props.question;
  var onAddOption = Props.onAddOption;
  var onChangeQuestionTitle = Props.onChangeQuestionTitle;
  var onChangeQuestionOption = Props.onChangeQuestionOption;
  var renderOptions = $$Array.of_list(List.mapi((function (i, option) {
              return React.createElement("div", {
                          key: option[/* id */0],
                          className: "mb-2"
                        }, React.createElement("label", {
                              htmlFor: option[/* id */0]
                            }, React.createElement("div", undefined, React.createElement(Text$ReactHooksTemplate.Span[/* make */0], {
                                      children: "Option " + String(i + 1 | 0)
                                    })), React.createElement(Form$ReactHooksTemplate.Input[/* make */0], {
                                  id: option[/* id */0],
                                  type_: "text",
                                  onChange: (function (e) {
                                      return Curry._3(onChangeQuestionOption, question[/* id */0], option[/* id */0], e.target.value);
                                    }),
                                  value: option[/* title */1],
                                  placeholder: "an answer..."
                                })));
            }), question[/* options */2]));
  return React.createElement("section", {
              className: "border-b-2 pb-4 mb-4 border-gray-200"
            }, React.createElement("div", {
                  className: "mb-4"
                }, React.createElement("label", {
                      htmlFor: question[/* id */0]
                    }, React.createElement("div", undefined, React.createElement(Text$ReactHooksTemplate.Span[/* make */0], {
                              uppercase: true,
                              children: "What do you want to ask?"
                            })), React.createElement(Form$ReactHooksTemplate.Input[/* make */0], {
                          id: question[/* id */0],
                          type_: "text",
                          onChange: (function (e) {
                              return Curry._2(onChangeQuestionTitle, question[/* id */0], e.target.value);
                            }),
                          value: question[/* title */1],
                          placeholder: "the question..."
                        }))), React.createElement("div", undefined, React.createElement(Text$ReactHooksTemplate.Span[/* make */0], {
                      uppercase: true,
                      children: "What are possible answers?"
                    }), renderOptions), React.createElement(Button$ReactHooksTemplate.make, {
                  title: "Add Option",
                  onClick: (function (_e) {
                      return Curry._1(onAddOption, question[/* title */1]);
                    }),
                  intent: /* Link */2
                }));
}

var make = QuestionComposer;

exports.valueFromEvent = valueFromEvent;
exports.make = make;
/* react Not a pure module */
